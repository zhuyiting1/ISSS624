---
title: "Hands-on Exercise 3"
author: Zhu Yiting
execute: 
  warning: false
  message: false
format: html
editor: visual
---

# Geographical Segmentation with Spatially Constrained Clustering Techniques

## 1. Overview

This exercise aims to delineate homogeneous regions by using geographically referenced multivariate data. There are two main analyses, namely:

1.  hierarchical cluster analysis; and
2.  spatially constrained cluster analysis.

### 1.1. Learning Objectives

1.  Convert GIS polygon data into R's simple feature data.frame by using appropriate functions of **sf** package.
2.  Convert simple feature data.frame into R's SpatialPolygonDataFrame object by using appropriate functions of **sf** package.
3.  Perform cluster analysis using *hclust()* of Base R.
4.  Perform spatially constrained cluster analysis using *skater()* of Base R.
5.  Visualise analysis output using **ggplot2** and **tmap** packages.

## 2. Getting Started

### 2.1. The Analytical Question

In geobusiness and spatial policy, it is common practice to delineate the market or planning areas into homogeneous regions by using multivariate data. In this hands-on exercise, we are interested to delineate [Shan State](https://en.wikipedia.org/wiki/Shan_State), [Myanmar](https://en.wikipedia.org/wiki/Myanmar), into homogeneous regions by using multiple Information and Community Technology (ICT) measures, namely: Radio, Telephone, Land line phone, Mobile phone, Computer and Internet at home.

### 2.2. The Data

Two data sets will be used in this study:

1.  Myanmar Township Boundary Data (i.e. `myanmar_township_boundaries`). This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.
2.  `Shan-ICT.csv`. This is an extract of the [2014 Myanmar Population and Housing Census Myanmar](https://myanmar.unfpa.org/en/publications/2014-population-and-housing-census-myanmar-data-sheet), at the township level.

Both data sets were downloaded from [Myanmar Information Management Unit (MIMU)](http://themimu.info/).

## 3. Installing and Loading R Packages

We will prepare our R environment by installing and loading the necessary R packages, using [*p_load()*](https://www.rdocumentation.org/packages/pacman/versions/0.5.1/topics/p_load) function of [**pacman**](https://www.rdocumentation.org/packages/pacman/versions/0.5.1) package.

The R packages needed for this exercise are as follows:

1.  Spatial data handling - [**sf**](https://r-spatial.github.io/sf/), [**rgdal**](http://cran.nexr.com/web/packages/rgdal/index.html) and [**spdep**](https://www.rdocumentation.org/packages/spdep/versions/1.2-7)
2.  Attribute data handling - [**tidyverse**](https://www.tidyverse.org/), specifically [**readr**](https://readr.tidyverse.org/), [**ggplot2**](https://ggplot2.tidyverse.org/) and [**dplyr**](https://dplyr.tidyverse.org/)
3.  Choropleth mapping - [**tmap**](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)
4.  Multivariate data visualisation and analysis - [**coorplot**](https://www.rdocumentation.org/packages/corrplot/versions/0.92), [**ggpubr**](https://www.rdocumentation.org/packages/ggpubr/versions/0.5.0), [**factoextra**](https://www.rdocumentation.org/packages/factoextra/versions/1.0.7) and [**heatmaply**](https://www.rdocumentation.org/packages/heatmaply/versions/1.4.0)
5.  Cluster analysis - [**cluster**](https://cran.r-project.org/web/packages/cluster/index.html), [**NbClust**](https://www.rdocumentation.org/packages/NbClust/versions/3.0.1/topics/NbClust), [**ClustGeo**](https://hal.archives-ouvertes.fr/hal-01664018/file/pub00056373.pdf)and [**psych**](https://www.rdocumentation.org/packages/psych/versions/2.2.9)

The code chunk below installs and loads the required R packages into the R environment.

```{r}
pacman::p_load(rgdal, spdep, tmap, sf, 
               ggpubr, cluster, factoextra, NbClust, 
               heatmaply, corrplot, psych, tidyverse)
```

## 4. Data Import and Preperation

### 4.1. Importing Geospatial Data into R Environment

In this section, we import Myanmar Township Boundary GIS data and its associated attribute table into the R environment.

The Myanmar Township Boundary GIS data is in ESRI shapefile format. We can import it into the R environment using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf**. We also use the piping function *%\>%* from **dplyr** and perform *filter()* to extract only the data for the Shan state. This is done in the code chunk below.

```{r}
shan_sf <- st_read(dsn = "data/geospatial",
                   layer = "myanmar_township_boundaries") %>% 
  filter(ST %in% c("Shan (East)", "Shan (North)", "Shan (South)"))
```

The imported Myanmar township boundary object is assigned to `shan_sf`. It is saved in **simple feature data.frame** format. We see that the full shapefile before filtering for Shan state has 330 features and 14 fields, which should include **multipolygon** geometry as its last field based on the geometry type displayed. Looking at the Environment pane, we see that `shan_sf` is filtered down to 55 observations. The bounding box shows the range of x and y, which are between 9 and 102 and suggests that the data is in [decimal degrees format](https://www.maptools.com/tutorials/lat_lon/formats). The coordinate reference system (CRS) used is geographic, in [**wgs84**](https://gisgeography.com/wgs84-world-geodetic-system/).

We can view the content of `shan_sf` simple features data.frame by calling it directly, using the code chunk below.

```{r}
shan_sf
```

As the sf.data.frame conforms to Hardy Wickham's [tidy framework](https://edzer.github.io/rstudio_conf/#18), we can use [*glimpse()*](https://dplyr.tidyverse.org/reference/glimpse.html) of **dplyr** to check the data types of its fields.

```{r}
glimpse(shan_sf)
```

### 4.2. Importing Aspatial Data into R Environment

The csv file is imported using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** using the code chunk below.

```{r}
ict <- read_csv("data/aspatial/Shan-ICT.csv")
```

The imported attribute data set is saved in R's tibble data.frame format and named `ict`. We see that it also has 55 observations, and 11 columns which include the number of households for each ICT variable from the 2014 Myanmar Population and Housing Census Myanmar.

The code chunk below uses *summary()* of **Base R** to show the summary statistics for each of the 11 variables in the `ict` data.frame.

```{r}
summary(ict)
```

The highest number among the maximum values is 62,388 households for television, which is consistent with our knowledge of it being a common source of entertainment and communication method in this era.

### 4.3. Deriving New Variables Using dplyr **Package**

The unit of measurement of the values are the number of households. Using these values directly will be biased by the underlying total number of households. In general, the townships with relative higher total number of households will also have higher absolute number of households owning radio, television, etc.

In order to overcome this problem, we will derive the penetration rate of each ICT variable, using the [*mutate()*](https://dplyr.tidyverse.org/reference/mutate.html) function of **dplyr** to create new columns as shown in the code chunk below. We also use [*rename()*](https://dplyr.tidyverse.org/reference/rename.html) of **dplyr** to make the variable names more easily understood and when using them in the *mutate()* functions.

```{r}
ict_derived <- ict %>%
  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %>%
  mutate(`TV_PR` = `Television`/`Total households`*1000) %>%
  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %>%
  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %>%
  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %>%
  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %>%
  rename(`DT_PCODE`=`District Pcode`,`DT`=`District Name`,
         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,
         `TT_HOUSEHOLDS`=`Total households`,
         `RADIO`=`Radio`, `TV`=`Television`, 
         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,
         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) 
```

We can see that the new variables are appended to the`ict` data.frame in `ict_derived`, using the *summary()* function of **Base R**.

```{r}
summary(ict_derived)
```

The derived proportions range between 1.041 for the Internet and 842.4 for television.

### 4.4. Joining Geospatial and Aspatial Data

## We combine both sets of data into a single data.frame using [*left_join()*](https://dplyr.tidyverse.org/reference/mutate-joins.html) of **dplyr**, which appends the second data.frame to the first based on the observations in the first. The `shan_sf` simple feature data.frame will be used as the base data object, and the `ict_derived` data.frame will be used as the join table.

As there are 4 variables which are common across both data sets, namely `DT`, `DT_PCODE`, `TS`, and `TS_PCODE`, we will specify the criteria for joining, in this case by `TS_PCODE`. We do so using the code chunk below.

```{r}
shan_sf <- left_join(shan_sf, 
                     ict_derived, 
                     by=c("TS_PCODE"="TS_PCODE"))
```

## 5. Exploratory Data Analysis (EDA)

### 5.1. EDA Using Statistical Graphics

We plot the distribution of variables (i.e. number of households with radio) using appropriate Exploratory Data Analysis (EDA) using the combination [*ggplot()*](https://ggplot2.tidyverse.org/reference/ggplot.html) (to initialise a ggplot object) with [*geom_histogram()*](https://ggplot2.tidyverse.org/reference/geom_histogram.html) (to plot a histogram) of **ggplot2** as shown in the code chunk below.

```{r}
ggplot(data = shan_sf, 
       aes(x = `RADIO`)) +
  geom_histogram(bins = 20, 
                 color = "black", 
                 fill = "light blue")
```

Seeing the distribution being right-skewed and having counts that are far out to the right and disjoint from the rest of the frequency bars, we also use [*geom_boxplot()*](https://ggplot2.tidyverse.org/reference/geom_boxplot.html) of **ggplot2** to plot a boxplot, which is useful for detecting outliers which are displayed as individual points outside of the box-and-whiskers.

```{r}
ggplot(data = shan_sf,
       aes(x = `RADIO`)) +
  geom_boxplot(color="black", 
               fill="light blue")
```

We see 3 individual dots displayed outside of the box-and-whiskers, signifying 3 outliers beyond 12,500 households.

Next, we also plot the distribution of the newly derived variable (i.e. Radio penetration rate (PR)) by using the code chunk below.

```{r}
ggplot(data = shan_sf, 
       aes(x = `RADIO_PR`)) +
  geom_histogram(bins = 20, 
                 color = "black", 
                 fill = "light blue")
```

We see that the Radio PR appears more normal with less outliers, but still slightly right-skewed.

We similarly plot the boxplot for Radio PR using the code chunk below.

```{r}
ggplot(data = shan_sf, 
       aes(x = `RADIO_PR`)) +
  geom_boxplot(color = "black", 
               fill = "light blue")
```

We can repeat the process for all 6 modes of ICT in the data, and combine them into a single figure using [*ggarrange()*](https://rpkgs.datanovia.com/ggpubr/reference/ggarrange.html) of **ggpubr** to group and arrange the plots (in a similar way to [*tmap_arrange()*](https://r-tmap.github.io/tmap/reference/tmap_arrange.html) of **tmap**, except for ggplots instead of tmaps).

```{r}
radio <- ggplot(data=shan_sf, 
             aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

tv <- ggplot(data=shan_sf, 
             aes(x=`TV_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

llphone <- ggplot(data=shan_sf, 
             aes(x=`LLPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

mphone <- ggplot(data=shan_sf, 
             aes(x=`MPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

computer <- ggplot(data=shan_sf, 
             aes(x=`COMPUTER_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

internet <- ggplot(data=shan_sf, 
             aes(x=`INTERNET_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

ggarrange(radio, tv, llphone, mphone, computer, internet, 
          ncol = 3, 
          nrow = 2)
```

From the histograms, we see that all ICT PRs are right-skewed with potential outliers, except TV PR which is left-skewed. We confirm this using boxplots.

```{r}
radio <- ggplot(data=shan_sf, 
             aes(x=`RADIO_PR`)) +
  geom_boxplot(color="black", 
               fill="light blue")

tv <- ggplot(data=shan_sf, 
             aes(x=`TV_PR`)) +
  geom_boxplot(color="black", 
               fill="light blue")

llphone <- ggplot(data=shan_sf, 
             aes(x=`LLPHONE_PR`)) +
  geom_boxplot(color="black", 
               fill="light blue")

mphone <- ggplot(data=shan_sf, 
             aes(x=`MPHONE_PR`)) +
  geom_boxplot(color="black", 
               fill="light blue")

computer <- ggplot(data=shan_sf, 
             aes(x=`COMPUTER_PR`)) +
  geom_boxplot(color="black", 
               fill="light blue")

internet <- ggplot(data=shan_sf, 
             aes(x=`INTERNET_PR`)) +
  geom_boxplot(color="black", 
               fill="light blue")

ggarrange(radio, tv, llphone, mphone, computer, internet, 
          ncol = 3, 
          nrow = 2)
```

It turns out that TV PR has outliers on both the left and right of the box-and-whiskers. In addition, for mobile phone PR, there is no outlier.

### 5.2. EDA Using Choropleth Map

To have a quick look at the distribution of Radio PR of Shan State at township level, we will use a choropleth map.

The code chunk below plots a choropleth map using [*qtm()*](https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/qtm) of **tmap**. This is a quick and easy way to get a quick view of the spatial distribution, coloured by 5 equal intervals, by simply specifying (i) the simple feature data.frame and (ii) the variable by which to colour the map.

```{r}
qtm(shan_sf, "RADIO_PR")
```

We see darker regions of Radio PR in the extreme Northwest, along the West side and in the Southeast side of Shan State.

In order to reveal that the distribution shown in the choropleth map above is biased to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLD.map) and the other for the total number of households with Radio (RADIO.map), using

-   [*tm_shape()*](https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_shape)- to plot the geometries of the sf data.frame,

-   [*tm_fill()*](https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_fill) - to specify the variable by which the polygons are coloured, number of intervals, types of intervals (e.g. equal, quantile), displayed title of the legend, and display of histogram of the values of variable plotted,

-   [*tm_borders()*](https://www.rdocumentation.org/packages/tmap/versions/0.7/topics/tm_borders) - to customise the border properties such as transparency,

-   [*tm_layout()*](https://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_layout) - to customise the plot layout such as the title of plot, size of legend, position of title and legend, and

-   [*tmap_arrange()*](https://www.rdocumentation.org/packages/tmap/versions/0.7/topics/tm_borders) - to plot multiple tmaps

of **tmap** in the code chunk below.

```{r}
TT_HOUSEHOLDS.map <- tm_shape(shan_sf) + 
  tm_fill(col = "TT_HOUSEHOLDS",
          n = 5,
          style = "jenks", 
          title = "Total households",
          legend.hist = TRUE) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Total number of households",
            main.title.size = 1,
            main.title.position = "center",
            legend.outside = TRUE)

RADIO.map <- tm_shape(shan_sf) + 
  tm_fill(col = "RADIO",
          n = 5,
          style = "jenks",
          title = "Number Radio ",
          legend.hist = TRUE) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Number of households with Radio",
            main.title.size = 1,
            main.title.position = "center",
            legend.outside = TRUE)

tmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,
             asp=NA, ncol=2)
```

We use [`style = "jenks"`](https://en.wikipedia.org/wiki/Jenks_natural_breaks_optimization) which identifies groups of similar values in the data, and maximises the difference between categories.

We note that the choropleth maps above show that townships with relatively larger number of households are also showing relatively higher number of Radio ownership, as seen in the darker coloured regions.

We plot the choropleth maps showing the distribution of the total number of households and Radio PR using the code chunk below. Here we use *tm_polygons()*, *tm_facets()* and *tm_legend()* instead from **tmap** to plot the two maps side-by-side easily.

```{r}
tm_shape(shan_sf) +
    tm_polygons(c("TT_HOUSEHOLDS", "RADIO_PR"),
                style="jenks") +
    tm_facets(sync = TRUE, ncol = 2) +
  tm_legend(legend.position = c("right", "bottom"))+
  tm_layout(outer.margins=0, asp=0)
```

Here, we see that the Radio PR is no longer directly correlated with the total number of households. In particular, we see that there are dark red regions in the extreme Northwest, in the Southwest and Southeast regions in the Radio PR plot on the right, but are yellow or light orange in the total households plot on the left. This removes the bias from the underlying household distribution!

## 6. Correlation Analysis

Before we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated. This is because if highly correlated variables are used for cluster analysis, specific aspects covered by these variables will be over-represented in the clustering solution. In this regard, absolute correlation (r) above 0.85 are problematic and should be avoided by removing either one of the pair of highly correlated variables.

We use [*corrplot.mixed()*](https://www.rdocumentation.org/packages/corrplot/versions/0.92/topics/corrplot.mixed) of [**corrplot**](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html) to visualise and analyse the correlation of the input variables, using the code chunk below.

```{r}
cluster_vars.cor = cor(ict_derived[,12:17])
corrplot.mixed(cluster_vars.cor,
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

The correlation plot above shows that `COMPUTER_PR` and `INTERNET_PR` are highly correlated (r = 0.87 \> 0.85). This suggest that only one of them should be used in the cluster analysis instead of both. In this exercise, we will use `COMPUTER_PR` instead of `INTERNET_PR` as the former provides direct output and interaction with users, similar to other ICT variables in this data set.

## 7. Hierarchical Cluster Analysis

### 7.1. Extracting Clustering Variables

The code chunk below will be used to extract the clustering variables from the *shan_sf* simple feature object into data.frame.

```{r}
cluster_vars <- shan_sf %>%
  st_set_geometry(NULL) %>%
  select("TS.x", "RADIO_PR", "TV_PR", "LLPHONE_PR", "MPHONE_PR", "COMPUTER_PR")
head(cluster_vars,10)
```

Next, we need to change the rows by township name instead of row number by using the code chunk below.

```{r}
row.names(cluster_vars) <- cluster_vars$"TS.x"
head(cluster_vars,10)
```

Now, we will delete the TS.x field which is a duplicate of the row names now, by using the code chunk below.

```{r}
shan_ict <- select(cluster_vars, c(2:6))
head(shan_ict, 10)
```

### 7.2. Data Standardisation

In general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis. Some common variable standardisation techniques are:

1.  Z-score - transforms normal variants to standard score form;
2.  Min-Max - transforms data to a value between 0 and 1; and
3.  Decimal Scaling - normalises by moving the decimal points of the maximum value of the variable to \<1.

### 7.3. Z-score Standardisation

Z-score standardisation can be performed easily by using [*scale()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) of **Base R**. The code chunk below will be used to stadardisation the clustering variables by using Z-score method, and then displays the summary statistics of the clustering variables using [*describe()*](https://www.rdocumentation.org/packages/Hmisc/versions/4.7-2/topics/describe) of **psych** to display standard deviation.

```{r}
shan_ict.z <- scale(shan_ict)
psych::describe(shan_ict.z)
```

The mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively by virtue of Z-score standardisation.

Note that Z-score standardisation method should only be use if all variables come from normal distribution.

### 7.4. Min-Max Standardisation

In the code chunk below, *normalize()* of [**heatmaply**](https://cran.r-project.org/web/packages/heatmaply/) is used to stadardise the clustering variables by using Min-Max method. The *summary()* of **Base R** is then used to display the summary statistics of the standardised clustering variables.

```{r}
shan_ict.std <- normalize(shan_ict)
summary(shan_ict.std)
```

We see that the value range of the Min-Max standarised clustering variables is now within 0 and 1 (inclusive).

### 7.5. Visualising the Standardised Clustering Variables

Beside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.

The code chunk below plot the scaled `Radio_PR` field.

```{r}
r <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Non-standardised")

shan_ict_s_df <- as.data.frame(shan_ict.std)
s <- ggplot(data=shan_ict_s_df, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Min-Max Standardisation")

shan_ict_z_df <- as.data.frame(shan_ict.z)
z <- ggplot(data=shan_ict_z_df, 
       aes(x=`RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  ggtitle("Z-score Standardisation")

ggarrange(r, s, z,
          ncol = 3,
          nrow = 1)
```

We see that before standardisation, the distribution appears to be right-skewed, hence Z-score standardisation may not be the best option if we wish to use standardised data. Nevertheless, the general shape of the distribution is similar across both standardisation methods.

Notice that the overall distribution of the clustering variables will change after the data standardisation. Hence, it is advisible **NOT** to perform data standardisation if the values range of the clustering variables are not very large. In this case, as we earlier saw that the PRs of all ICTs analysed are in the scale of 0-100, we will proceed with clustering analysis using the non-standardised PRs.

On the other hand, it is advisable that heavily skewed data are first transformed to a more symmetric distribution. The general variable transformation techniques are:

1.  Log transformation - taking the natural log of the clustering variables;
2.  Square root - taking the square root of the variables; and
3.  Windorising - replacing all values greater than x percentile with the xth percentile and values less than (100-x)th percentile with the values of the (100-x)th percentile. This reduces the effects of outliers on statistical analyses, particularly hierarchical clustering which is sensitive to noise and outliers.

In this exercise, we see that the clustering variables are neither heavily skewed (only a slight right-skew for most ICT PRs) nor have many extreme outliers (up to 3). Hence, we will not perform variable transformation.

### 7.6. Computing Proximity Matrix

In R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using [*dist()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/dist.html) of **R stats**.

*dist()* supports six distance proximity calculations, they are: `euclidean`,`maximum`,`manhattan`,`canberra`,`binary` and `minkowski`. The default is `euclidean` proximity matrix.

The code chunk below is used to compute the proximity matrix using `euclidean` method.

```{r}
proxmat <- dist(shan_ict, method = 'euclidean')
```

The code chunk below can then be used to list the content of `proxmat` for visual inspection. As the full list by township is long, we will not display it here and you can try it yourself. :)

```{r}
#| eval: false
proxmat
```

### 7.7. Computing Hierarchical Clustering

In R, there are several packages provide hierarchical clustering function. In this hands-on exercise, [*hclust()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/hclust.html) of **R stats** will be used.

*hclust()* employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: `ward.D`, `ward.D2`, `single, complete`, `average(UPGMA)`, `mcquitty(WPGMA)`, `median(WPGMC)` and `centroid(UPGMC)`.

The code chunk below performs hierarchical cluster analysis using `ward.D` method. The hierarchical clustering output is stored in an object of class **hclust** which describes the tree produced by the clustering process.

```{r}
hclust_ward <- hclust(proxmat, method = 'ward.D')
```

We can then plot the tree by using *plot()* of **R Graphics** as shown in the code chunk below.

```{r}
plot(hclust_ward, cex = 0.6)
```

### 7.8. Selecting the Optimal Clustering Algorithm

One of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use [*agnes()*](https://www.rdocumentation.org/packages/cluster/versions/2.1.0/topics/agnes) function of [**cluster**](https://cran.r-project.org/web/packages/cluster/) package. It functions like *hclus()*, however, with the *agnes()* function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).

The code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.

```{r}
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")

ac <- function(x) {
  agnes(shan_ict, method = x)$ac
}

map_dbl(m, ac)
```

With reference to the output above, we can see that Ward's method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward's method will be used.

### 7.9. Determining Optimal Clusters

Another technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.

There are [three](https://www.datanovia.com/en/lessons/determining-the-optimal-number-of-clusters-3-must-know-methods/) commonly used methods to determine the optimal clusters, they are:

-   [Elbow Method](https://en.wikipedia.org/wiki/Elbow_method_(clustering))

-   [Average Silhouette Method](https://www.sciencedirect.com/science/article/pii/0377042787901257?via%3Dihub)

-   [Gap Statistic Method](https://statweb.stanford.edu/~gwalther/gap)

#### Gap Statistic Method

The [**gap statistic**](http://www.web.stanford.edu/~hastie/Papers/gap.pdf) compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.

To compute the gap statistic, [*clusGap()*](https://www.rdocumentation.org/packages/cluster/versions/2.1.0/topics/clusGap) of [**cluster**](https://cran.r-project.org/web/packages/cluster/) package will be used.

```{r}
set.seed(1234)
gap_stat <- clusGap(shan_ict, 
                    FUN = hcut, 
                    nstart = 25, 
                    K.max = 10, 
                    B = 50)
# Print the result
print(gap_stat, method = "firstmax")
```

Also note that the [*hcut*](https://rpkgs.datanovia.com/factoextra/reference/hcut.html) function used is from [**factoextra**](https://rpkgs.datanovia.com/factoextra/) package.

Next, we can visualise the plot by using [*fviz_gap_stat()*](https://rpkgs.datanovia.com/factoextra/reference/fviz_nbclust.html) of [**factoextra**](https://rpkgs.datanovia.com/factoextra/) package.

```{r}
fviz_gap_stat(gap_stat)
```

With reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.

**Note:** In addition to these commonly used approaches, the [NbClust](https://cran.r-project.org/web/packages/NbClust/) package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.

### 7.10. Interpreting the dendrograms

In the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.

The height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.

It's also possible to draw the dendrogram with a border around the selected clusters by using [*rect.hclust()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/rect.hclust.html) of **R stats**. The argument `border` is used to specify the border colors for the rectangles.

```{r}
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, 
            k = 6, 
            border = 2:5)
```

### 7.11. Visually-driven hierarchical clustering analysis

In this section, we will learn how to perform visually-driven hiearchical clustering analysis by using [**heatmaply**](https://cran.r-project.org/web/packages/heatmaply/) package.

With **heatmaply**, we are able to build both highly interactive cluster heatmap or static cluster heatmap.

### 7.12. Transforming the data frame into a matrix

The data was loaded into a data frame, but it has to be a data matrix to make your heatmap.

The code chunk below will be used to transform `shan_ict` data frame into a data matrix.

```{r}
shan_ict_mat <- data.matrix(shan_ict)
```

### 7.13. Plotting interactive cluster heatmap using *heatmaply()*

In the code chunk below, the [*heatmaply()*](https://talgalili.github.io/heatmaply/reference/heatmaply.html) of [heatmaply](https://talgalili.github.io/heatmaply/) package is used to build an interactive cluster heatmap.

```{r}
heatmaply(normalize(shan_ict_mat),
          Colv=NA,
          dist_method = "euclidean",
          hclust_method = "ward.D",
          seriate = "OLO",
          colors = Blues,
          k_row = 6,
          margins = c(NA,200,60,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="Geographic Segmentation of Shan State by ICT indicators",
          xlab = "ICT Indicators",
          ylab = "Townships of Shan State"
          )
```

### 7.14. Mapping the clusters formed

With closed examination of the dendragram above, we have decided to retain six clusters.

[*cutree()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/cutree.html) of **Base R** will be used in the code chunk below to derive a 6-cluster model.

```{r}
groups <- as.factor(cutree(hclust_ward, k=6))
```

The output is called `groups`. It is a **list** object.

In order to visualise the clusters, the *groups* object need to be appended onto `shan_sf` simple feature object.

The code chunk below form the join in three steps:

-   the `groups` list object will be converted into a matrix;

-   *cbind()* is used to append `groups` matrix onto `shan_sf` to produce an output simple feature object called `shan_sf_cluster`; and

-   *rename()* of **dplyr** package is used to rename `as.matrix.groups` field as `CLUSTER`.

```{r}
shan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER`=`as.matrix.groups.`)
```

Next, *qtm()* of **tmap** package is used to plot the choropleth map showing the cluster formed.

```{r}
qtm(shan_sf_cluster, "CLUSTER")
```

The choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used.

## 8. Spatially Constrained Clustering - SKATER Approach

In this section, we will derive spatially constrained cluster by using [*skater()*](https://r-spatial.github.io/spdep/reference/skater.html) method of [**spdep**](https://r-spatial.github.io/spdep/) package.

### 8.1. Converting Simple Features Data.frame into SpatialPolygonsDataFrame

First, we need to convert `shan_sf` into SpatialPolygonsDataFrame. This is because SKATER function only support **sp** objects such as SpatialPolygonDataFrame.

The code chunk below uses [*as_Spatial()*](https://r-spatial.github.io/sf/reference/coerce-methods.html) of **sf** package to convert *shan_sf* into a SpatialPolygonDataFrame called *shan_sp*.

```{r}
shan_sp <- as_Spatial(shan_sf)
```

### 8.2. Computing Neighbour List

Next, [*poly2nd()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package will be used to compute the neighbours list from polygon list. In the code chunk below, the default Queen's contiguity method is used.

```{r}
shan.nb <- poly2nb(shan_sp)
summary(shan.nb)
```

There are 264 pairs of neighbours defined based on the definition of at least 1 shared boundary point, among the 55 towns in Shan State.

We can plot the neighbours list on `shan_sp` by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan State township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify `add=TRUE` to plot the network on top of the boundaries.

```{r}
plot(shan_sp, 
     border=grey(.5))
plot(shan.nb, 
     coordinates(shan_sp), 
     col="blue", 
     add=TRUE)
```

Note that when plotting the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.

### 8.3. Computing Edge Costs

Next, [*nbcosts()*](https://r-spatial.github.io/spdep/reference/nbcosts.html) of **spdep** package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.

The code chunk below is used to compute the cost of each edge.

```{r}
lcosts <- nbcosts(shan.nb, shan_ict)
```

For each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.

Next, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed `lcosts` as the weights.

In order to achieve this, [*nb2listw()*](https://r-spatial.github.io/spdep/reference/nb2listw.html) of **spdep** package is used as shown in the code chunk below.

Note that we specify the `style="B"` to make sure the cost values are [not]{.underline} row-standardised.

```{r}
shan.w <- nb2listw(shan.nb, 
                   lcosts, 
                   style="B")
summary(shan.w)
```

### 8.4. Computing Minimum Spanning Tree

The minimum spanning tree is computed by mean of the [*mstree()*](https://r-spatial.github.io/spdep/reference/mstree.html) of **spdep** package as shown in the code chunk below.

```{r}
shan.mst <- mstree(shan.w)
```

After computing the MST, we can check its class and dimension by using the code chunk below.

```{r}
class(shan.mst)
```

```{r}
dim(shan.mst)
```

R tells us that it is a 54 by 3 matrix. The dimension is 1 less than the total number of towns of 55 in Shan State, because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.

We can display the content of *shan.mst* by using *head()* as shown in the code chunk below.

```{r}
head(shan.mst)
```

The plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.

```{r}
plot(shan_sp, border=gray(.5))
plot.mst(shan.mst, 
         coordinates(shan_sp), 
         col="blue", 
         cex.lab=0.7, 
         cex.circles=0.005, 
         add=TRUE)
```

### 8.5. Computing Spatially Constrained Clusters Using SKATER Method

The code chunk below compute the spatially constrained cluster using [*skater()*](https://r-spatial.github.io/spdep/reference/skater.html) of **spdep** package.

```{r}
clust6 <- skater(edges = shan.mst[,1:2], 
                 data = shan_ict, 
                 method = "euclidean", 
                 ncuts = 5)
```

The *skater()* takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts. Note: It is set to **one less than the number of clusters**. So, the value specified is [not]{.underline} the number of clusters, but the number of cuts in the graph, one less than the number of clusters.

The result of the *skater()* is an object of class **skater**. We can examine its contents by using *str()* of **utils** to display the internal structure of `clust6`, using the code chunk below.

```{r}
str(clust6)
```

The most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.

We can check the cluster assignment by using the `groups` arguement of `clust6` in the conde chunk below.

```{r}
ccs6 <- clust6$groups
ccs6
```

We can find out how many observations are in each cluster by means of the table command. Parenthetically, we can also find this as the dimension of each vector in the lists contained in `edges.groups`. For example, the first list has node with dimension 12, which is also the number of observations in the first cluster.

```{r}
table(ccs6)
```

Finally, we can also plot the pruned tree that shows the five clusters on top of the townshop area.

```{r}
plot(shan_sp, border=gray(.5))
plot(clust6, 
     coordinates(shan_sp), 
     cex.lab=.7,
     groups.colors=c("red","green","blue", "brown", "pink"),
     cex.circles=0.005, 
     add=TRUE)
```

### 8.6. Visualising Clusters in Choropleth Map

The code chunk below is used to plot the newly derived clusters by using SKATER method.

```{r}
groups_mat <- as.matrix(clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)
qtm(shan_sf_spatialcluster, "SP_CLUSTER")
```

For easy comparison, we place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.

```{r}
hclust.map <- qtm(shan_sf_cluster,
                  "CLUSTER") + 
  tm_borders(alpha = 0.5) 

shclust.map <- qtm(shan_sf_spatialcluster,
                   "SP_CLUSTER") + 
  tm_borders(alpha = 0.5) 

tmap_arrange(hclust.map, shclust.map,
             asp=NA, ncol=2)
```

The difference between the SKATER approach versus hierarchical clustering is clear - the former takes into account the spatial configuration of the towns and cluster those closer in proximity (neighbours) as seen on the plot on the right, while the former shows clusters that are all over the place. This allows us to further study the ICT PRs in Shan State and advice on practical questions in relation to them.
